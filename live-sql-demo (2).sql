DROP TABLE EMPLOYEE;
DROP TABLE PERSON;
DROP TABLE ORGANIZATION;
DROP TABLE EMPLOYEE_ROLE;
DROP TABLE EMPLOYEE_TYPE;
DROP TABLE ADDRESS_TYPE;

CREATE TABLE ADDRESS_TYPE (
    ADDRESS_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    ADDRESS_TYPE VARCHAR2(20) NOT NULL,
    C CLOB
);

CREATE TABLE EMPLOYEE_TYPE (
    EMPLOYEE_TYPE_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    EMPLOYEE_TYPE VARCHAR2(50),
    EMPLOYEE_TYPE_DESC CLOB,
    PAY_TYPE VARCHAR2(10),
    COMPENSATION_PACKAGE NUMBER(12, 2)
);

CREATE TABLE EMPLOYEE_ROLE (
    EMPLOYEE_ROLE_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    ROLE_NAME VARCHAR2(30) NOT NULL,
    ROLE_DESC CLOB
);

CREATE TABLE ORGANIZATION (
    ORGANIZATION_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    CLIENT_ORG_NAME VARCHAR2(20) NOT NULL,
    CLIENT_ORG_CODE NUMBER(4) NOT NULL,
    SUPERIOR_ORG_NAME VARCHAR2(20),
    AVAILABILITY_DATE DATE,
    TOP_LEVEL_NAME VARCHAR2(20),
    ISO_COUNTRY_CODE VARCHAR2(20)
);

CREATE TABLE PERSON (
    PERSON_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    FIRST_NAME VARCHAR2(20) NOT NULL,
    MIDDLE_NAME VARCHAR2(20) NOT NULL,
    LAST_NAME VARCHAR2(20) NOT NULL,
    AGE NUMBER NOT NULL,
    PHONE_NUMBER VARCHAR2(15),
    EMAIL_ID VARCHAR2(100) NOT NULL,
    ADDRESS_ID NUMBER,
    INSURANCE_ID VARCHAR2(20),
    DEVICE_TYPE VARCHAR2(20),
    CONSTRAINT FK_ADDRESS_ID FOREIGN KEY (ADDRESS_ID) REFERENCES ADDRESS_TYPE(ADDRESS_ID)
);

CREATE TABLE EMPLOYEE (
    EMPLOYEE_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    EMPLOYEE_ROLE_ID NUMBER,
    EMPLOYEE_TYPE_ID NUMBER,
    ORGANIZATION_ID NUMBER,
    PERSON_ID NUMBER NOT NULL,
    HOME_COUNTRY VARCHAR2(50),
    WORK_COUNTRY VARCHAR2(50),
    GENDER CHAR(1),
    DOB DATE,
    MARTIAL_STATUS VARCHAR2(20),
    ETHNICITY VARCHAR2(20),
    CONSTRAINT FK_ORGANIZATION_ID FOREIGN KEY (ORGANIZATION_ID) REFERENCES ORGANIZATION(ORGANIZATION_ID),
    CONSTRAINT FK_EMPLOYEE_ROLE_ID FOREIGN KEY (EMPLOYEE_ROLE_ID) REFERENCES EMPLOYEE_ROLE(EMPLOYEE_ROLE_ID),
    CONSTRAINT FK_PERSON_ID FOREIGN KEY (PERSON_ID) REFERENCES PERSON(PERSON_ID),
    CONSTRAINT FK_EMPLOYEE_TYPE_ID FOREIGN KEY (EMPLOYEE_TYPE_ID) REFERENCES EMPLOYEE_TYPE(EMPLOYEE_TYPE_ID)
);

CREATE OR REPLACE TRIGGER update_person
BEFORE INSERT OR UPDATE ON PERSON-
FOR EACH ROW
BEGIN
    IF :NEW.AGE < 18 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Age must be 18 or above');
    END IF;
END;
/

-- Package Specification
CREATE OR REPLACE PACKAGE HR_PACKAGE AS
    PROCEDURE DeleteAllObjects;
    PROCEDURE INSERT_ADDRESS(
        ADDRESS_ID IN NUMBER,
        ADDRESS_TYPE IN VARCHAR2
    );
    PROCEDURE INSERT_EMPLOYEE(
        EMPLOYEE_ROLE_ID IN NUMBER,
        EMPLOYEE_TYPE_ID IN NUMBER,
        ORGANIZATION_ID IN NUMBER,
        PERSON_ID IN NUMBER,
        HOME_COUNTRY IN VARCHAR2,
        WORK_COUNTRY IN VARCHAR2,
        GENDER IN CHAR,
        DOB IN DATE,
        MARTIAL_STATUS IN VARCHAR2,
        ETHNICITY IN VARCHAR2
    );
    PROCEDURE INSERT_EMPLOYEE_ROLE(
        ROLE_NAME IN VARCHAR2,
        ROLE_DESC IN VARCHAR2
    );
    PROCEDURE INSERT_EMPLOYEE_TYPE(
        EMPLOYEE_TYPE IN VARCHAR2,
        EMPLOYEE_TYPE_DESC IN VARCHAR2,
        PAY_TYPE IN VARCHAR2,
        COMPENSATION_PACKAGE IN NUMBER
    );
    PROCEDURE INSERT_ORGANIZATION(
        CLIENT_ORG_NAME IN VARCHAR2,
        CLIENT_ORG_CODE IN NUMBER,
        SUPERIOR_ORG_NAME IN VARCHAR2,
        AVAILABILITY_DATE IN DATE,
        TOP_LEVEL_NAME IN VARCHAR2,
        ISO_COUNTRY_CODE IN VARCHAR2
    );
    PROCEDURE INSERT_PERSON(
        FIRST_NAME IN VARCHAR2,
        MIDDLE_NAME IN VARCHAR2,
        LAST_NAME IN VARCHAR2,
        AGE IN NUMBER,
        PHONE_NUMBER IN VARCHAR2,
        EMAIL_ID IN VARCHAR2,
        ADDRESS_ID IN NUMBER,
        INSURANCE_ID IN VARCHAR2,
        DEVICE_TYPE IN VARCHAR2
    );
    FUNCTION get_employee_full_name(
        emp_id IN NUMBER
    ) RETURN VARCHAR2;
    FUNCTION get_role_name(
        role_id IN NUMBER
    ) RETURN VARCHAR2;
    PROCEDURE DESCRIBER;
END HR_PACKAGE;
/


-- Package Body
CREATE OR REPLACE PACKAGE BODY HR_PACKAGE AS
    PROCEDURE DeleteAllObjects AS
    BEGIN
        -- Drop all tables
        FOR tbl IN (
            SELECT 'DROP TABLE "' || owner || '"."' || table_name || '" CASCADE CONSTRAINTS' AS sql_stmt
            FROM all_tables
            WHERE owner = 'YOUR_SCHEMA_NAME'
        ) LOOP
            BEGIN
                EXECUTE IMMEDIATE tbl.sql_stmt;
                DBMS_OUTPUT.PUT_LINE('Dropped Table: ' || tbl.sql_stmt);
            EXCEPTION
                WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('Failed to drop table: ' || tbl.sql_stmt || ' - ' || SQLERRM);
            END;
        END LOOP;

        -- Drop all views
        FOR vw IN (
            SELECT 'DROP VIEW "' || owner || '"."' || view_name || '"' AS sql_stmt
            FROM all_views
            WHERE owner = 'YOUR_SCHEMA_NAME'
        ) LOOP
            BEGIN
                EXECUTE IMMEDIATE vw.sql_stmt;
                DBMS_OUTPUT.PUT_LINE('Dropped View: ' || vw.sql_stmt);
            EXCEPTION
                WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('Failed to drop view: ' || vw.sql_stmt || ' - ' || SQLERRM);
            END;
        END LOOP;

        -- Drop all procedures
        FOR proc IN (
            SELECT 'DROP PROCEDURE "' || owner || '"."' || object_name || '"' AS sql_stmt
            FROM all_objects
            WHERE object_type = 'PROCEDURE' AND owner = 'YOUR_SCHEMA_NAME'
        ) LOOP
            BEGIN
                EXECUTE IMMEDIATE proc.sql_stmt;
                DBMS_OUTPUT.PUT_LINE('Dropped Procedure: ' || proc.sql_stmt);
            EXCEPTION
                WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('Failed to drop procedure: ' || proc.sql_stmt || ' - ' || SQLERRM);
            END;
        END LOOP;
    END DeleteAllObjects;

    PROCEDURE INSERT_ADDRESS(
        ADDRESS_ID IN NUMBER,
        ADDRESS_TYPE IN VARCHAR2
    ) AS
    BEGIN
        INSERT INTO ADDRESS_TYPE (
            ADDRESS_ID,
            ADDRESS_TYPE
        ) VALUES (
            ADDRESS_ID,
            ADDRESS_TYPE
        );
        COMMIT;
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            DBMS_OUTPUT.PUT_LINE('Error: Address type ' || ADDRESS_TYPE || ' already exists.');
    END;

    PROCEDURE INSERT_EMPLOYEE(
        EMPLOYEE_ROLE_ID IN NUMBER,
        EMPLOYEE_TYPE_ID IN NUMBER,
        ORGANIZATION_ID IN NUMBER,
        PERSON_ID IN NUMBER,
        HOME_COUNTRY IN VARCHAR2,
        WORK_COUNTRY IN VARCHAR2,
        GENDER IN CHAR,
        DOB IN DATE,
        MARTIAL_STATUS IN VARCHAR2,
        ETHNICITY IN VARCHAR2
    ) AS
    BEGIN
        INSERT INTO EMPLOYEE (
            EMPLOYEE_ROLE_ID,
            EMPLOYEE_TYPE_ID,
            ORGANIZATION_ID,
            PERSON_ID,
            HOME_COUNTRY,
            WORK_COUNTRY,
            GENDER,
            DOB,
            MARTIAL_STATUS,
            ETHNICITY
        ) VALUES (
            EMPLOYEE_ROLE_ID,
            EMPLOYEE_TYPE_ID,
            ORGANIZATION_ID,
            PERSON_ID,
            HOME_COUNTRY,
            WORK_COUNTRY,
            GENDER,
            DOB,
            MARTIAL_STATUS,
            ETHNICITY
        );
    END;

    PROCEDURE INSERT_EMPLOYEE_ROLE(
        ROLE_NAME IN VARCHAR2,
        ROLE_DESC IN VARCHAR2
    ) AS
    BEGIN
        INSERT INTO EMPLOYEE_ROLE (
            ROLE_NAME,
            ROLE_DESC
        ) VALUES (
            ROLE_NAME,
            ROLE_DESC
        );
        COMMIT;
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            DBMS_OUTPUT.PUT_LINE('Error: Employee role ' || ROLE_NAME || ' already exists.');
    END;

    PROCEDURE INSERT_EMPLOYEE_TYPE(
        EMPLOYEE_TYPE IN VARCHAR2,
        EMPLOYEE_TYPE_DESC IN VARCHAR2,
        PAY_TYPE IN VARCHAR2,
        COMPENSATION_PACKAGE IN NUMBER
    ) AS
    BEGIN
        INSERT INTO EMPLOYEE_TYPE (
            EMPLOYEE_TYPE,
            EMPLOYEE_TYPE_DESC,
            PAY_TYPE,
            COMPENSATION_PACKAGE
        ) VALUES (
            EMPLOYEE_TYPE,
            EMPLOYEE_TYPE_DESC,
            PAY_TYPE,
            COMPENSATION_PACKAGE
        );
        COMMIT;
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            DBMS_OUTPUT.PUT_LINE('Error: Employee type ' || EMPLOYEE_TYPE || ' already exists.');
    END;


    PROCEDURE INSERT_ORGANIZATION(
        CLIENT_ORG_NAME IN VARCHAR2,
        CLIENT_ORG_CODE IN NUMBER,
        SUPERIOR_ORG_NAME IN VARCHAR2,
        AVAILABILITY_DATE IN DATE,
        TOP_LEVEL_NAME IN VARCHAR2,
        ISO_COUNTRY_CODE IN VARCHAR2
    ) AS
    BEGIN
        INSERT INTO ORGANIZATION (
            CLIENT_ORG_NAME,
            CLIENT_ORG_CODE,
            SUPERIOR_ORG_NAME,
            AVAILABILITY_DATE,
            TOP_LEVEL_NAME,
            ISO_COUNTRY_CODE
        ) VALUES (
            CLIENT_ORG_NAME,
            CLIENT_ORG_CODE,
            SUPERIOR_ORG_NAME,
            AVAILABILITY_DATE,
            TOP_LEVEL_NAME,
            ISO_COUNTRY_CODE
        );
        COMMIT;
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            DBMS_OUTPUT.PUT_LINE('Error: Organization with client code ' || CLIENT_ORG_CODE || ' already exists.');
    END;

    PROCEDURE INSERT_PERSON(
        FIRST_NAME IN VARCHAR2,
        MIDDLE_NAME IN VARCHAR2,
        LAST_NAME IN VARCHAR2,
        AGE IN NUMBER,
        PHONE_NUMBER IN VARCHAR2,
        EMAIL_ID IN VARCHAR2,
        ADDRESS_ID IN NUMBER,
        INSURANCE_ID IN VARCHAR2,
        DEVICE_TYPE IN VARCHAR2
    ) AS
    BEGIN
        INSERT INTO PERSON (
            FIRST_NAME,            MIDDLE_NAME,            LAST_NAME,            AGE,            PHONE_NUMBER,            EMAIL_ID,            ADDRESS_ID,            INSURANCE_ID,            DEVICE_TYPE
        ) VALUES (
            FIRST_NAME,            MIDDLE_NAME,            LAST_NAME,            AGE,            PHONE_NUMBER,            EMAIL_ID,            ADDRESS_ID,            INSURANCE_ID,            DEVICE_TYPE
        );
        COMMIT;
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            DBMS_OUTPUT.PUT_LINE('Error: Person with email ' || EMAIL_ID || ' already exists.');
    END;

    FUNCTION get_employee_full_name(
        emp_id IN NUMBER
    ) RETURN VARCHAR2 IS
        full_name VARCHAR2(100);
    BEGIN
        SELECT FIRST_NAME || ' ' || MIDDLE_NAME || ' ' || LAST_NAME INTO full_name FROM PERSON WHERE PERSON_ID = emp_id;
        RETURN full_name;
    END;

    FUNCTION get_role_name(
        role_id IN NUMBER
    ) RETURN VARCHAR2 IS
        role_name VARCHAR2(100);
    BEGIN
        SELECT ROLE_NAME INTO role_name FROM EMPLOYEE_ROLE WHERE EMPLOYEE_ROLE_ID = role_id;
        RETURN role_name;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN 'Role ID not found';
    END;
    PROCEDURE DESCRIBER AS
    BEGIN
        -- Describe Address_Type table
        DBMS_OUTPUT.PUT_LINE('Description of ADDRESS_TYPE table:');
        DBMS_OUTPUT.PUT_LINE('------------------------------------');
        FOR rec IN (
            SELECT column_name, data_type, data_length
            FROM USER_TAB_COLUMNS
            WHERE table_name = 'ADDRESS_TYPE'
        ) LOOP
            DBMS_OUTPUT.PUT_LINE(rec.column_name || ' ' || rec.data_type || ' ' || rec.data_length);
        END LOOP;

        -- Describe Employee_Type table
        DBMS_OUTPUT.PUT_LINE('Description of EMPLOYEE_TYPE table:');
        DBMS_OUTPUT.PUT_LINE('------------------------------------');
        FOR rec IN (
            SELECT column_name, data_type, data_length
            FROM USER_TAB_COLUMNS
            WHERE table_name = 'EMPLOYEE_TYPE'
        ) LOOP
            DBMS_OUTPUT.PUT_LINE(rec.column_name || ' ' || rec.data_type || ' ' || rec.data_length);
        END LOOP;

        -- Describe Employee_Role table
        DBMS_OUTPUT.PUT_LINE('Description of EMPLOYEE_ROLE table:');
        DBMS_OUTPUT.PUT_LINE('------------------------------------');
        FOR rec IN (
            SELECT column_name, data_type, data_length
            FROM USER_TAB_COLUMNS
            WHERE table_name = 'EMPLOYEE_ROLE'
        ) LOOP
            DBMS_OUTPUT.PUT_LINE(rec.column_name || ' ' || rec.data_type || ' ' || rec.data_length);
        END LOOP;

        -- Describe Organization table
        DBMS_OUTPUT.PUT_LINE('Description of ORGANIZATION table:');
        DBMS_OUTPUT.PUT_LINE('------------------------------------');
        FOR rec IN (
            SELECT column_name, data_type, data_length
            FROM USER_TAB_COLUMNS
            WHERE table_name = 'ORGANIZATION'
        ) LOOP
            DBMS_OUTPUT.PUT_LINE(rec.column_name || ' ' || rec.data_type || ' ' || rec.data_length);
        END LOOP;

        -- Describe Person table
        DBMS_OUTPUT.PUT_LINE('Description of PERSON table:');
        DBMS_OUTPUT.PUT_LINE('------------------------------------');
        FOR rec IN (
            SELECT column_name, data_type, data_length
            FROM USER_TAB_COLUMNS
            WHERE table_name = 'PERSON'
        ) LOOP
            DBMS_OUTPUT.PUT_LINE(rec.column_name || ' ' || rec.data_type || ' ' || rec.data_length);
        END LOOP;

        -- Describe Employee table
        DBMS_OUTPUT.PUT_LINE('Description of EMPLOYEE table:');
        DBMS_OUTPUT.PUT_LINE('------------------------------------');
        FOR rec IN (
            SELECT column_name, data_type, data_length
            FROM USER_TAB_COLUMNS
            WHERE table_name = 'EMPLOYEE'
        ) LOOP
            DBMS_OUTPUT.PUT_LINE(rec.column_name || ' ' || rec.data_type || ' ' || rec.data_length);
        END LOOP;
    END;
END;

 -- Create View
CREATE OR REPLACE VIEW EMPLOYEE_DETAILS AS
SELECT 
P.FIRST_NAME,    P.LAST_NAME,    P.AGE,    P.PHONE_NUMBER,    P.EMAIL_ID,    P.ADDRESS_ID,    P.INSURANCE_ID,    P.DEVICE_TYPE,    E.HOME_COUNTRY,    E.WORK_COUNTRY,    E.GENDER,    E.DOB,    E.MARTIAL_STATUS,    E.ETHNICITY,    ER.ROLE_NAME,    ET.EMPLOYEE_TYPE,    O.CLIENT_ORG_NAME,    O.CLIENT_ORG_CODE
FROM 
PERSON P
JOIN 
EMPLOYEE E ON P.PERSON_ID = E.PERSON_ID
JOIN 
EMPLOYEE_ROLE ER ON E.EMPLOYEE_ROLE_ID = ER.EMPLOYEE_ROLE_ID
JOIN 
EMPLOYEE_TYPE ET ON E.EMPLOYEE_TYPE_ID = ET.EMPLOYEE_TYPE_ID
JOIN 
ORGANIZATION O ON E.ORGANIZATION_ID = O.ORGANIZATION_ID;

-- Create Index
CREATE INDEX IDX_ID ON EMPLOYEE (PERSON_ID);

--Add Data
BEGIN
    -- Step 1: Insert Address Types
    HR_PACKAGE.INSERT_ADDRESS(1,'Home');
    HR_PACKAGE.INSERT_ADDRESS(2,'Office');
    HR_PACKAGE.INSERT_ADDRESS(3,'Billing');

    -- Step 2: Insert Employee Types
    HR_PACKAGE.INSERT_EMPLOYEE_TYPE('Full-Time', 'Standard full-time position', 'Salary', 80000);
    HR_PACKAGE.INSERT_EMPLOYEE_TYPE('Part-Time', 'Flexible hours, fewer benefits', 'Hourly', 30000);
    HR_PACKAGE.INSERT_EMPLOYEE_TYPE('Contractor', 'Short-term contract', 'Hourly', 45000);

    -- Step 3: Insert Employee Roles
    HR_PACKAGE.INSERT_EMPLOYEE_ROLE('Software Engineer', 'Builds and maintains applications');
    HR_PACKAGE.INSERT_EMPLOYEE_ROLE('Data Analyst', 'Analyzes data for business insights');
    HR_PACKAGE.INSERT_EMPLOYEE_ROLE('Product Manager', 'Leads product strategy');

    -- Step 4: Insert Organizations
    HR_PACKAGE.INSERT_ORGANIZATION('InnovaTech', 201, 'GlobalTech', SYSDATE, 'InnovaGroup', 'US');
    HR_PACKAGE.INSERT_ORGANIZATION('DataWave', 202, 'GlobalTech', SYSDATE, 'InnovaGroup', 'UK');
    HR_PACKAGE.INSERT_ORGANIZATION('NextGen Solutions', 203, 'GlobalTech', SYSDATE, 'InnovaGroup', 'CA');

    -- Step 5: Insert Persons
    FOR i IN 1..15 LOOP
        HR_PACKAGE.INSERT_PERSON(
            FIRST_NAME => CASE MOD(i, 5)
                WHEN 0 THEN 'Alice'
                WHEN 1 THEN 'Bob'
                WHEN 2 THEN 'Charlie'
                WHEN 3 THEN 'Diana'
                ELSE 'Ethan' END,
            MIDDLE_NAME => 'X',
            LAST_NAME => 'Smith' || i,
            AGE => 22 + MOD(i * 3, 18),  -- age between 22–40
            PHONE_NUMBER => '555-01' || LPAD(i, 2, '0'),
            EMAIL_ID => 'user' || i || '@demo.org',
            ADDRESS_ID => MOD(i, 3) + 1,
            INSURANCE_ID => 'INS' || TO_CHAR(1000 + i),
            DEVICE_TYPE => CASE MOD(i, 3)
                WHEN 0 THEN 'Mobile'
                WHEN 1 THEN 'Laptop'
                ELSE 'Tablet' END
        );
    END LOOP;

    -- Step 6: Insert Employees
    FOR i IN 1..15 LOOP
        HR_PACKAGE.INSERT_EMPLOYEE(
            EMPLOYEE_ROLE_ID => MOD(i, 3) + 1,
            EMPLOYEE_TYPE_ID => MOD(i, 3) + 1,
            ORGANIZATION_ID => MOD(i, 3) + 1,
            PERSON_ID => i,
            HOME_COUNTRY => CASE MOD(i, 3)
                WHEN 0 THEN 'USA'
                WHEN 1 THEN 'UK'
                ELSE 'Canada' END,
            WORK_COUNTRY => CASE MOD(i, 2)
                WHEN 0 THEN 'USA'
                ELSE 'Germany' END,
            GENDER => CASE MOD(i, 2)
                WHEN 0 THEN 'M'
                ELSE 'F' END,
            DOB => ADD_MONTHS(TO_DATE('1985-01-01', 'YYYY-MM-DD'), i * 12),
            MARTIAL_STATUS => CASE MOD(i, 3)
                WHEN 0 THEN 'Single'
                WHEN 1 THEN 'Married'
                ELSE 'Divorced' END,
            ETHNICITY => CASE MOD(i, 4)
                WHEN 0 THEN 'Asian'
                WHEN 1 THEN 'White'
                WHEN 2 THEN 'Black'
                ELSE 'Latino' END
        );
    END LOOP;
END;
/

SELECT * FROM EMPLOYEE_DETAILS;

Select First_Name,count(*) from EMPLOYEE_DETAILS group by first_name Having Count(*)>2